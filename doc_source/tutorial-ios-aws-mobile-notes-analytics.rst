.. Copyright 2010-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0
   International License (the "License"). You may not use this file except in compliance with the
   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.

   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific language governing permissions and
   limitations under the License.

.. _tutorial-ios-aws-mobile-notes-analytics:

##############################
Add Analytics to the Notes App
##############################

In the :ref:`previous section <tutorial-android-aws-mobile-notes-setup>` of this tutorial, we installed Xcode,
downloaded a sample note-taking app from GitHub, then compiled and ran
it in the Android Emulator. This tutorial assumes you have completed the
those steps. In this section, we will extend the notes app to
include application analytics. Application analytics allow us to gather
demographic information about the application usage.

You should be able to complete this section in 10-15 minutes.

Set Up Your Back End
--------------------

To start, set up the mobile backend resources in AWS:

#. Open the `AWS Mobile Hub console <https://console.aws.amazon.com/mobilehub/home/>`__.

   -  If you do not have an AWS account, `sign up for the AWS
      Free Tier <https://aws.amazon.com/free/>`__.

#. Choose :guilabel:`Create` on the upper left, and the type :userinput:`ios-notes-app` for the name of the Mobile Hub project.
#. Choose :guilabel:`Next`, choose :guilabel:`iOS`, and then choose :guilabel:`Add`.
#. Choose :guilabel:`Download Cloud Config`, and save :file:`awsconfiguration.json`. This file the configuration to connect your app to your backend.
#. Choose :guilabel:`Next` and then choose :guilabel:`Done` to create the project.

.. list-table::
   :widths: 1 6

   * - Used in this section

     - `AWS Mobile Hub <https://console.aws.amazon.com/mobilehub/home/>`__: Configure your mobile app's AWS backend in minutes, and then to manage those resources as your app evolves.

Connect to Your Backend
-----------------------

#. Drag :file:`awsconfiguration.json` from the download location into the Xcode project folder containing :file:`Info.plist`. Select :guilabel:`Copy items if needed` and :guilabel:`Create groups` in the options dialog.

#. Choose :guilabel:`Finish`.

You have now created the AWS resources you need and connected them to your app.

Add Analytics the Dependencies
------------------------------

#. To create a :file:`Podfile` for your project, run:

   .. code-block:: bash

      cd YOUR-APP-ROOT-FOLDER
      pod init

#. Open :file:`Podfile` replace the placeholder code with the following. If the file is not visible your Xcode Project Navigator, right-click the project root and choose :guilabel:`Show in finder`.

   .. code-block:: bash

        platform :ios, '9.0'
        target :'MyNotes' do
          use_frameworks!

            # Analytics dependency
            pod 'AWSPinpoint', '~> 2.6.5'

            # other pods

        end

#. Close your Xcode project and then run:

   .. code-block:: bash

        pod install --repo-update

.. list table::
   :widths: 1 6

   * - **Important**

     - From this point forward, **open your project using the** :file:`.xcworkspace` **file** generated by cocoapods for all further development.

Initialize Amazon Pinpoint to Enable Analytics
----------------------------------------------

You have just installed the AWS Mobile dependencies for your app.

To turn your analytics on, open your project using :file:`MyNotes.xcworkspace` insert the following code into the :code:`didFinishLaunchwithOptions` method of your app's :file:`AppDelegate.swift`.

.. code-block:: java

                 //. . .

   // Analytics imports
   import AWSCore
   import AWSPinpoint

                 //. . .


    class AppDelegate: UIResponder, UIApplicationDelegate {

                 //. . .

         // Add the pinpoint variable
         var pinpoint: AWSPinpoint?

                 //. . .

         func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions:
         [UIApplicationLaunchOptionsKey: Any]?) -> Bool {

                 //. . .

            // Initialize Pinpoint to enable session analytics
            pinpoint = AWSPinpoint(configuration:
                 AWSPinpointConfiguration.defaultPinpointConfiguration(launchOptions: launchOptions))

            return true
         }

                 //. . .

    }

Now your app is setup to provide session analytics you can view in the Amazon Pinpoint console.

Run the App and Validate Results
--------------------------------

Re-build the application and run the application in the Simulator. It
should work as before. Add and delete some notes to
generate analytics traffic that can be shown in the Pinpoint console.

To view the demographics and custom events:

#. Choose :guilabel:`Analytics` on the top right to open your project in the Amazon Pinpoint console.
#. Choose the :guilabel:`Analytics` icon on the left. You should see an up-tick in several graphs (it may take a few minutes for the data to show):

   .. image:: images/pinpoint-overview.png
      :scale: 100 %
      :alt: Image of the Amazon Pinpoint console.

   .. only:: pdf

      .. image:: images/pinpoint-overview.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-overview.png
         :scale: 75


#. Choose :guilabel:`Demographics` to view the demographics information.

   .. image:: images/pinpoint-demographics.png
      :scale: 100 %
      :alt: Image of the Amazon Pinpoint console Demographics tab.

   .. only:: pdf

      .. image:: images/pinpoint-demographics.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-demographics.png
         :scale: 75


If you see data within each page, you have successfully added analytics
to your app. Should you release your app, you can come
back here to see more details about your users.

Add Custom Analytics
--------------------

Amazon Pinpoint also allows you to capture custom analytics data for events that show usage of your app's features. For this tutorial we'll send analytics each time a note is added or deleted.

To add analytics events, open :file:`./Data/NotesContentProvider.swift` where both add and delete operations happen.

Start by adding the following imports.

.. code-block:: swift

   import AWSCore
   import AWSPinpoint


Add the following function and enum to the :code:`NotesContentProvider` class to send :code:`AddNote` and :code:`DeleteNote` event analytics.

.. code-block:: swift


   public class NotesContentProvider  {

            // . . .


       // Send analytics AddNote and DeleteNote events
       func sendNoteEvent(noteId: String, eventType: String)
       {

           let pinpointClient = AWSPinpoint(configuration:
               AWSPinpointConfiguration.defaultPinpointConfiguration(launchOptions: nil))

           let pinpointAnalyticsClient = pinpointClient.analyticsClient

           let event = pinpointAnalyticsClient.createEvent(withEventType: eventType)
           event.addAttribute("NoteId", forKey: noteId)
           pinpointAnalyticsClient.record(event)
           pinpointAnalyticsClient.submitEvents()
       }

       enum noteEventType: String {
           case AddNote = "AddNote"
           case DeleteNote = "DeleteNote"
       }

   }

To capture note additions, place the following :code:`sendNoteEvent` function call within the :code:`insert` function of that class.

.. code-block:: swift

    /**
     * Insert a new record into the database using NSManagedObjectContext
     *
     * @param noteTitle the note title to be inserted
     * @param noteContent the note content to be inserted
     * @return noteId the unique Note Id
     */
   func insert(noteTitle: String, noteContent: String) -> String {

               // . . .

        print("New Note Saved : \(newNoteId)")

        //Send AddNote analytics event
        sendNoteEvent(noteId: newNoteId, eventType: noteEventType.AddNote.rawValue)

        return newNoteId
   }

To capture note deletions, place the following :code:`sendNoteEvent` function call within the :code:`delete` function of that class.

.. code-block:: swift

     /**
     * Delete note using NSManagedObjectContext and NSManagedObject
     * @param managedObjectContext the managed context for the note to be deleted
     * @param managedObj the core data managed object for note to be deleted
     * @param noteId the noteId to be delete
     */
    public func delete(managedObjectContext: NSManagedObjectContext, managedObj: NSManagedObject, noteId: String!)  {
        let context = managedObjectContext
        context.delete(managedObj)

        do {

                  // . . .

            // Send DeletNote analytics event
            sendNoteEvent(noteId: noteId, eventType: noteEventType.DeleteNote.rawValue)

                  // . . .

        } catch {

                  // . . .
        }
    }

View Your Custom Analytics
--------------------------

To view the :code:`AddNote` and :code:`DeleteNote` custom analytics events, rebuild and run your app in the Simulator, add and delete notes, then return to the Amazon Pinpoint console for your project.

#. Choose :guilabel:`Events`.

#. Use the Event drop down to filter the event type (event types may take several minutes to appear).

   .. image:: images/pinpoint-addnote.png
      :scale: 100 %
      :alt: Image of the Add note event in the Amazon Pinpoint.

   .. only:: pdf

      .. image:: images/pinpoint-addnote.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-addnote.png
         :scale: 75

Next steps
----------

*  Continue by adding :ref:`Authentication <tutorial-ios-aws-mobile-notes-auth>`.

*  Learn more about `Amazon Pinpoint <https://aws.amazon.com/pinpoint/>`__.
